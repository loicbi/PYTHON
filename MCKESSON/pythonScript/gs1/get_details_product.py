# string representation of list to list
import ast
import requests
import json
import azure.core.exceptions
import os
import io
import shutil
from os import listdir
from os.path import isfile, join
import pathlib
from datetime import datetime
from azure.storage.blob import (BlobServiceClient, BlobClient, ContainerClient)

# all_list = []
#
# ini_list = jv_list_gtin
#
# # Python code to demonstrate converting
#
# # initializing string representation of a list
#
# # printing initialized string of list and its type
# # print("initial string", ini_list)
# # print(type(ini_list))
#
# # Converting string to list
# res = ast.literal_eval(ini_list)
#
# # printing final result and its type
# # print("final list", res)
# # print(type(res))
#
# list_gtin = []
#
# for i in range(len(res)):
#     # all_list.append(list(res[i].values()))
#     # print(res[i]['gtin'])
#     list_gtin.append(res[i]['gtin'])
# print(list_gtin)
'''############################# COPY FROM HERE TO MATILLION ################################'''

result_state_gtin_list_existing = []
result_state_gtin_list_not_existing = []
data_state = []
jv_token = 'e611b48d-eb5c-4a5e-ac07-4dc564bb594d'
bearer_token = 'Bearer ' + jv_token
headers = {"Authorization": bearer_token, 'content-type': 'application/json'}


def process_gtin(gtin, baseGln):
    url = f"https://demo-api-contentdistribution.gs1ca.org/api/products/{gtin}?baseGln={baseGln}"
    response = requests.get(
        url,
        headers=headers,
    )
    print(f"{gtin} : {response.status_code}")
    # print(response.content)
    if response.status_code == 200:
        data_state_json = response.json()
        # First we load existing data into a dict.
        a = json.dumps(data_state_json)
        data_state.append(json.loads(a))


def uploadToBlobStorage(container_name='dev-gs1ca'):
    # destination blob
    destination_blob = f"api=product/date={datetime.now().date()}/product_detail.json"
    connection_string = "DefaultEndpointsProtocol=https;AccountName=samtdaentcadl;AccountKey=3DRT9Nrt9Ab8xKZNW8A4PDcf2H9gg4IyLpqD7j1SaSIzhhKSuqdgAmKH9xLE2PpPf/ALz8fWL4Vsmk3PC0NyXw==;EndpointSuffix=core.windows.net"
    blob_service_client = BlobServiceClient.from_connection_string(connection_string)
    blob_client = blob_service_client.get_blob_client(container=container_name, blob=f'{destination_blob}')
    input_stream = io.BytesIO(data)
    try:
        blob_client.upload_blob(input_stream, blob_type="BlockBlob", overwrite=True)
        print(f"blob_client.url::: {blob_client.url}")
    except azure.core.exceptions.ResourceExistsError as error:
        pass


for value in [('062600700827', '0062600000019'),    ('062600964328', '0062600000019'), (None, '0062600000019'),
              # ('062600230706', '0062600000019'), ('062600964410', '0062600000019'),
              # ('062600964960', '0062600000019'), ('062600262509', '0062600000019'), ('062600965240', '0062600000019'),
              # ('062600239402', '0062600000019'), ('062600245526', '0062600000019'), ('062600246103', '0062600000019'),
              # ('062600263001', '0062600000019'), ('062600284952', '0062600000019'), ('062600271440', '0062600000019'),
              # ('062600262974', '0062600000019'), ('062600262950', '0062600000019'), ('062600315434', '0062600000019'),
              # ('062600338853', '0062600000019'), ('062600306845', '0062600000019'), ('062600283542', '0062600000019'),
              # ('062600306869', '0062600000019'), ('062600306876', '0062600000019'), ('062600306890', '0062600000019'),
              # ('062600338921', '0062600000019'), ('062600338938', '0062600000019'), ('062600306043', '0062600000019'),
              # ('062600338945', '0062600000019'), ('062600338952', '0062600000019'), ('062600338969', '0062600000019'),
              # ('062600338976', '0062600000019'), ('062600338983', '0062600000019'), ('062600338990', '0062600000019'),
              # ('062600351241', '0062600000019'), ('062600375865', '0062600000019'), ('062600309280', '0062600000019'),
              # ('062600380159', '0062600000019'), ('062600380227', '0062600000019'), ('062600385338', '0062600000019'),
              # ('062600380562', '0062600000019'), ('062600380081', '0062600000019'), ('062600380197', '0062600000019'),
              # ('062600380203', '0062600000019'), ('062600380210', '0062600000019'), ('062600380326', '0062600000019'),
              # ('062600380548', '0062600000019'), ('062600380555', '0062600000019'), ('062600380579', '0062600000019'),
              # ('062600381132', '0062600000019'), ('062600381149', '0062600000019'), ('062600381156', '0062600000019'),
              # ('062600381170', '0062600000019'), ('062600381187', '0062600000019'), ('062600381200', '0062600000019'),
              # ('062600381217', '0062600000019'), ('062600381224', '0062600000019'), ('062600400031', '0062600000019'),
              # ('062600400031', '0062600000019'), ('062600400055', '0062600000019'), ('062600444837', '0062600000019'),
              # ('062600433787', '0062600000019'), ('062600443052', '0062600000019'), ('062600475527', '0062600000019'),
              # ('062600475534', '0062600000019'), ('062600479013', '0062600000019'), ('062600479020', '0062600000019'),
              # ('062600479372', '0062600000019'), ('062600479389', '0062600000019'), ('062600415592', '0062600000019'),
              # ('062600415608', '0062600000019'), ('062600415615', '0062600000019'), ('062600415622', '0062600000019'),
              # ('062600451002', '0062600000019'), ('062600100535', '0062600000019'), ('062600410061', '0062600000019'),
              # ('062600300973', '0062600000019'), ('062600300973', '0062600000019'), ('062600451033', '0062600000019'),
              # ('062600700605', '0062600000019'), ('062600100368', '0062600000019'), ('062600100368', '0062600000019'),
              # ('062600400963', '0062600000019'), ('062600450012', '0062600000019'), ('062600430120', '0062600000019'),
              # ('062600430120', '0062600000019'), ('062600450081', '0062600000019'), ('062600963215', '0062600000019'),
              # ('062600963222', '0062600000019'), ('062600963246', '0062600000019'), ('062600962331', '0062600000019'),
              # ('062600963567', '0062600000019'), ('062600700599', '0062600000019'), ('062600962935', '0062600000019'),
              # ('062600964243', '0062600000019'), ('062600945518', '0062600000019'), ('062600945488', '0062600000019'),
              # ('062600825032', '0062600000019'), ('062600443489', '0062600000019'), ('062600946454', '0062600000019'),
              # ('062600946874', '0062600000019'), (None, '0062600000019'), ('062600953216', '0062600000019'),
              # ('062600959164', '0062600000019'), ('062600300751', '0062600000019'), ('062600960030', '0062600000019'),
              # ('062600960252', '0062600000019'), ('062600959898', '0062600000019'), ('062600959904', '0062600000019'),
              # (None, '0062600000019'), ('062600961334', '0062600000019'), ('062600961037', '0062600000019'),
              # ('062600959966', '0062600000019'), ('062600960825', '0062600000019'), ('062600961464', '0062600000019'),
              # ('062600961488', '0062600000019'), ('062600953049', '0062600000019'), ('062600961419', '0062600000019'),
              # ('062600961501', '0062600000019'), ('062600961792', '0062600000019'), ('062600962171', '0062600000019'),
              # (None, '0062600000019'), ('062600962195', '0062600000019'), ('062600962201', '0062600000019'),
              # ('062600962430', '0062600000019'), ('062600962379', '0062600000019'), ('00062600420091', '0062600000019'),
              # ('062600301154', '0062600000019'), ('062600430137', '0062600000019'), ('062600420008', '0062600000019'),
              # ('062600200228', '0062600000019'), ('062600420077', '0062600000019'), ('062600200624', '0062600000019'),
              # (None, '0062600000019'), ('062600945136', '0062600000019'), ('062600943781', '0062600000019'),
              # ('062600963765', '0062600000019'), ('062600964403', '0062600000019'), ('062600964687', '0062600000019'),
              # ('062600964786', '0062600000019'), ('062600250636', '0062600000019'), ('062600460202', '0062600000019'),
              # ('062600460189', '0062600000019'), ('062600460028', '0062600000019'), ('062600420046', '0062600000019'),
              #  ('062600200938', '0062600000019'), ('062600410009', '0062600000019'),
              # ('062600410047', '0062600000019'), ('062600700636', '0062600000019'), ('062600953025', '0062600000019'),
              # ('062600946997', '0062600000019'), ('062600953209', '0062600000019'), ('062600960276', '0062600000019'),
              # ('062600959935', '0062600000019'), ('062600960269', '0062600000019'), (None, '0062600000019'),
              # ('062600959928', '0062600000019'), ('062600301444', '0062600000019'), ('062600945891', '0062600000019'),
              # ('062600961341', '0062600000019'), ('062600961471', '0062600000019'), ('062600961518', '0062600000019'),
              # ('062600961310', '0062600000019'), ('062600962188', '0062600000019'), ('062600962140', '0062600000019'),
              # ('062600962805', '0062600000019'), ('062600963079', '0062600000019'), ('062600963086', '0062600000019'),
              # ('062600962959', '0062600000019'), ('062600963383', '0062600000019'), ('062600962263', '0062600000019'),
              # ('062600961457', '0062600000019'), ('062600962317', '0062600000019'), ('062600963772', '0062600000019'),
              # ('062600964083', '0062600000019'), ('062600964045', '0062600000019'), ('062600963185', '0062600000019'),
              # ('062600919663', '0062600000019'), ('062600965004', '0062600000019'), ('062600964311', '0062600000019'),
              # ('062600965035', '0062600000019'), ('062600250698', '0062600000019'), ('062600246110', '0062600000019'),
              # ('062600246165', '0062600000019'), ('062600233929', '0062600000019'), ('062600233936', '0062600000019'),
              # ('062600235732', '0062600000019'), ('062600235749', '0062600000019'), ('062600235756', '0062600000019'),
              # ('062600235756', '0062600000019'), ('062600262967', '0062600000019'), ('062600262998', '0062600000019'),
              # ('062600281104', '0062600000019'), ('062600281111', '0062600000019'), ('062600284938', '0062600000019'),
              # ('062600284945', '0062600000019'), ('062600284983', '0062600000019'), ('062600262943', '0062600000019'),
              # ('062600420053', '0062600000019'), ('062600420039', '0062600000019'), ('062600460110', '0062600000019'),
              # ('062600430182', '0062600000019'), ('062600400048', '0062600000019'), ('062600400048', '0062600000019'),
              # ('062600410030', '0062600000019'), ('062600420015', '0062600000019'), ('062600410016', '0062600000019'),
              # ('062600410023', '0062600000019'), ('062600413802', '0062600000019'), ('062600400215', '0062600000019'),
              # ('062600200136', '0062600000019'), ('062600700650', '0062600000019'), ('062600300485', '0062600000019'),
              # ('062600100559', '0062600000019'), ('062600100559', '0062600000019'), ('062600500601', '0062600000019'),
              # ('062600100788', '0062600000019'), ('062600100788', '0062600000019'), ('062600200785', '0062600000019'),
              # ('062600400956', '0062600000019'), ('062600400970', '0062600000019'), ('062600101150', '0062600000019'),
              # ('062600301147', '0062600000019'), ('062600301147', '0062600000019'), ('062600301130', '0062600000019'),
              # ('062600301130', '0062600000019'), (None, '0062600000019'), ('062600300966', '0062600000019'),
              # ('062600300751', '0062600000019'), ('062600600530', '0062600000019'), ('062600100948', '0062600000019'),
              # ('062600101259', '0062600000019'), ('062600101259', '0062600000019'), ('062600945761', '0062600000019'),
              # ('062600945907', '0062600000019'), ('062600945143', '0062600000019'), ('062600700971', '0062600000019'),
              # ('062600301437', '0062600000019'), ('062600301451', '0062600000019'), ('062600946591', '0062600000019'),
              # ('062600946447', '0062600000019'), ('062600960238', '0062600000019'), ('062600959805', '0062600000019'),
              # ('062600959911', '0062600000019'), ('062600953674', '0062600000019'), ('062600946898', '0062600000019'),
              # ('062600946843', '0062600000019'), ('062600953018', '0062600000019'), ('062600961297', '0062600000019'),
              # ('062600962218', '0062600000019'), ('062600961495', '0062600000019'), ('062600961426', '0062600000019'),
              # ('062600961303', '0062600000019'), ('062600961358', '0062600000019'), ('062600960818', '0062600000019'),
              # ('062600962157', '0062600000019'), ('3574661112794', '0062600000019'), ('3574661112800', '0062600000019'),
              # ('062600962829', '0062600000019'), ('062600962997', '0062600000019'), ('062600962966', '0062600000019'),
              # ('062600962942', '0062600000019'), ('062600962881', '0062600000019'), ('062600962799', '0062600000019'),
              # ('062600963093', '0062600000019'), ('062600963239', '0062600000019'), ('062600961433', '0062600000019'),
              # ('062600963208', '0062600000019'), ('062600962812', '0062600000019'), ('062600964090', '0062600000019'),
              # ('062600964052', '0062600000019'), ('062600964076', '0062600000019'), ('062600965042', '0062600000019'),
              # ('062600964670', '0062600000019'), ('062600964908', '0062600000019'), ('062600964915', '0062600000019'),
              # ('062600921338', '0062600000019'), ('062600230720', '0062600000019'), ('062600921192', '0062600000019')
              ]:
    # uploadToBlobStorage(gtin=gtin)
    gtin, baseGln = value[0], value[1]
    process_gtin(gtin=gtin, baseGln=baseGln)
data = json.dumps(data_state, indent=4, ensure_ascii=False)
print((data))
# print(type(data))
data = json.loads(json.dumps(data))
data = bytes(data, 'utf-8')
uploadToBlobStorage()
# print(data_state)
print('success')
