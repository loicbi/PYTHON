# string representation of list to list
import ast
import requests
import json
import os
import io
import shutil
from os import listdir
from os.path import isfile, join
import pathlib
from datetime import datetime
from azure.storage.blob import (BlobServiceClient, BlobClient, ContainerClient)

# all_list = []
#
# ini_list = jv_list_gtin
#
# # Python code to demonstrate converting
#
# # initializing string representation of a list
#
# # printing initialized string of list and its type
# # print("initial string", ini_list)
# # print(type(ini_list))
#
# # Converting string to list
# res = ast.literal_eval(ini_list)
#
# # printing final result and its type
# # print("final list", res)
# # print(type(res))
#
# list_gtin = []
#
# for i in range(len(res)):
#     # all_list.append(list(res[i].values()))
#     # print(res[i]['gtin'])
#     list_gtin.append(res[i]['gtin'])
# print(list_gtin)
'''############################# COPY FROM HERE TO MATILLION ################################'''

result_state_gtin_list_existing = []
result_state_gtin_list_not_existing = []
data_state = []
jv_token = '08161f1d-c918-4648-8402-bce853c0c54a'
bearer_token = 'Bearer ' + jv_token
headers = {"Authorization": bearer_token, 'content-type': 'application/json'}

connection_string = "DefaultEndpointsProtocol=https;AccountName=samtdaentcadl;AccountKey=3DRT9Nrt9Ab8xKZNW8A4PDcf2H9gg4IyLpqD7j1SaSIzhhKSuqdgAmKH9xLE2PpPf/ALz8fWL4Vsmk3PC0NyXw==;EndpointSuffix=core.windows.net"
container_name = 'dev-gs1ca'


# cs = context.cursor()
# Connect to your Snowflake account
# cs.execute("create or replace transient table DEMO_DB.ALF_DB_WH.GS1_STATE_GTIN (data_state_gtin variant)")

def process_gtin_to_get_details(gtin):
    # for gtin in list_gtin:
    url = "https://demo-api-contentdistribution.gs1ca.org/api/products/" + gtin + "/state.json"
    response = requests.get(
        url,
        headers=headers,
    )
    print(f"{gtin} : {response.status_code}")
    if response.status_code == 200:
        # result_state_gtin_list_existing = response.json()
        # for i in range(len(result_state_gtin_list_existing)):
        data_state_json = response.json()[0]
        # First we load existing data into a dict.
        # print('{"DATA_STATE_GTIN":  %s}' % (data_state_json))
        a = json.dumps(data_state_json)
        data_state.append(json.loads(a))

        # data_state += a + '\n'

        # get json data and move to blob
    if response.status_code == 403:
        result_state_gtin_list_not_existing.append(gtin)
        # print(f"{gtin} : {response.status_code} : {response.json()} ")


def uploadToBlobStorage(container_name=container_name):
    # destination blob
    destination_blob = f"api=state/date={datetime.now().date()}/gtin_state.json"
    blob_service_client = BlobServiceClient.from_connection_string(connection_string)
    blob_client = blob_service_client.get_blob_client(container=container_name, blob=f'{destination_blob}')
    input_stream = io.BytesIO(data)
    try:
        blob_client.upload_blob(input_stream, blob_type="BlockBlob", overwrite=True)
    except azure.core.exceptions.ResourceExistsError as error:
        pass


for gtin in ['62600964328', '62600230706', '62600964410', '62600964960', '62600278920', '62600262509',
             '62600965240', '62600239402', '62600245526', '62600246103', '62600291981', '62600263001', '62600284952', '62600271440', '62600262974', '62600262950',
             # '62600315434', '62600338853', '62600306845', '62600283542', '62600306869', '62600306876', '62600306890', '62600338921', '62600338938', '62600306043', '62600338945', '62600338952', '62600338969', '62600338976', '62600338983', '62600338990', '62600351241', '62600375865', '62600365385', '62600386267', '62600309280', '62600380159', '62600380227', '62600385338', '62600380562', '62600380081', '62600380197', '62600380203', '62600380210', '62600365392', '62600380326', '62600380548', '62600380555', '62600380579', '62600381132', '62600381149', '62600381156', '62600381170', '62600381187', '62600381200', '62600381217', '62600381224', '62600400031', '62600400031', '62600400055', '62600444837', '62600452931', '62600433787', '62600443052', '62600475527', '62600475534', '62600479013', '62600479020', '62600479372', '62600479389', '62600621474', '62600475541', '62600415592', '62600415608', '62600415615', '62600415622', '62600433848', '62600629678', '62600624376', '62600629685', '62600200211', '62600632616', '62600492364', '62600492371', '62600501202', '62600501219', '62600501226', '62600514776', '62600514783', '62600514790', '62600621368', '62600621740', '62600621757', '62600621764', '62600621771', '62600631497', '62600635242', '62600430205', '62600451002', '62600460011', '62600470027', '62600470041', '62600412058', '62600200068', '62600200099', '62600400222', '62600100535', '62600100658', '62600300584', '62600300669', '62600301413', '62600945051', '62600700766', '62600200761', '62600100955', '62600400741', '62600301123', '62600400895', '62600201003', '62600812216', '62600401052', '62600200075', '62600943996', '62600201218', '62600410061', '62600452016', '62600441041', '62600400789', '62600500250', '62600400918', '62600820266', '62600820280', '62600820105', '62600300973', '62600300973', '62600413000', '62600413055', '62600451033', '62600430014', '62600430021', '62600420107', '62600440105', '62600600097', '62600400024', '62600460073', '62600800541', '62600800459', '62600700605', '62600600165', '62600400246', '62600100368', '62600100368', '62600100474', '62600500595', '62600804075', '62600100641', '62600100672', '62600100719', '62600804105', '62600200617', '62600100795', '62600200495', '62600200631', '62600400666', '62600400796', '62600301062', '62600101167', '62600400987', '62600400925', '62600400963', '62600400888', '62600101174', '62600815996', '62600814999', '62600201089', '62600814937', '62600814975', '62600201195', '62600101280', '62600401007', '62600819802', '62600819819', '62600820273', '62600943798', '62600943804', '62600945167', '62600943941', '62600943972', '62600943965', '62600430083', '62600440099', '62600441058', '62600450012', '62600914538', '62600300225', '62600300782', '62600410054', '62600413840', '62600430120', '62600430120', '62600450081', '62600915849', '62600963215', '62600963222', '62600963246', '6260915832', '62600915818', '62600100290', '62600962331', '62600963567', '62600500526', '62600700599', '62600400642', '62600420060', '62600451040', '62600962935', '62600200594', '62600101136', '62600200815', '62600600523', '62600964243', '62600200518', '62600946072', '62600946089', '62600946096', '62600946126', '62600945518', '62600945952', '62600945471', '62600945464', '62600945501', '62600945778', '62600945785', '62600945815', '62600946041', '62600946058', '62600946102', '62600945457', '62600945488', '62600824462', '62600825032', '62600824592', '62600824592', '62600824189', '62600824196', '62600823540', '62600825087', '62600946010', '62600824608', '62600820334', '62600824486', '62600443489', '62600946393', '62600946386', '62600946409', '62600946454', '62600946607', '62600946614', '62600953742', '62600946850', '62600946867', '62600946874', '62600953186', '62600946904', '62600953216', '62600959164', '62600904065', '62600904089', '62600300751', '62600822154', '62600903945', '62600960498', '62600960009', '62600960016', '62600960030', '62600960047', '62600960078', '62600960252', '62600959126', '62600959133', '62600959157', '62600959898', '62600959904', '62600960559', '62600908315', '62600908322', '62600908377', '62600908384', '62600960504', '62600903020', '62600905666', '62600905673', '62600961334', '62600961037', '62600959966', '62600960825', '62600910424', '62600961464', '62600961488', '62600953049', '62600961419', '62600961501', '62600912169', '62600961792', '62600912152', '62600912237', '62600912244', '62600912299', '62600804792', '62600813176', '62600962171', '62600401038', '62600962195', '62600962201', '62600962430', '62600814951', '62600400505', '62600400512', '62600400536', '62600962379', '62600943958', '62600945150', '62600201287', '62600400529', '62600420091', '62600500427', '62600301154', '62600430137', '62600460103', '62600400901', '62600200983', '62600201256', '62600400239', '62600600660', '62600420008', '62600200488', '62600945426', '62600413048', '62600820297', '62600401021', '62600200143', '62600600141', '62600200228', '62600450098', '62600440112', '62600100061', '62600500373', '62600700612', '62600700643', '62600100665', '62600600295', '62600300287', '62600453006', '62600460004', '62600420077', '62600470034', '62600430229', '62600430212', '62600500274', '62600400093', '62600200778', '62600200624', '62600700728', '62600700759', '62600200990', '62600400932', '62600400994', '62600200822', '62600200952', '62600812285', '62600812292', '62600810434', '62600101013', '62600814920', '62600819826', '62600820112', '62600819796', '62600401045',
             ]:
    process_gtin_to_get_details(gtin=gtin)

# print(f"gtin not exist: {result_state_gtin_list_not_existing}")
# data = json.loads('{"DATA_STATE_GTIN":' + json.dumps(data_state) + '}')
data = json.loads(json.dumps(data_state))
data = json.dumps(data, indent=4, ensure_ascii=False)
# print(data)
data = json.loads(json.dumps(data))
data = bytes(data, 'utf-8')
# print(type(data))
uploadToBlobStorage()
# print(data_state)
